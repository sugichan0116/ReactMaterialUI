{"version":3,"sources":["FloatingActionButtonZoom.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TabContainer","props","children","dir","react_default","a","createElement","Typography","component","style","padding","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","width","position","minHeight","fab","bottom","spacing","right","fabGreen","color","common","white","green","&:hover","FloatingActionButtonZoom","classes","useTheme","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","fabs","className","icon","Add_default","Edit_default","clsx","KeyboardArrowUp_default","AppBar","Tabs","onChange","event","newValue","indicatorColor","textColor","variant","Tab","label","lib_default","axis","direction","index","onChangeIndex","map","Zoom","key","in","timeout","transitionDelay","concat","unmountOnExit","Fab","MyComponent","src_FloatingActionButtonZoom","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8fc794e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport UpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport green from '@material-ui/core/colors/green';\r\n\r\nfunction TabContainer(props) {\r\n  const { children, dir } = props;\r\n\r\n  return (\r\n    <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\r\n      {children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  dir: PropTypes.string.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: 500,\r\n    position: 'relative',\r\n    minHeight: 200,\r\n  },\r\n  fab: {\r\n    position: 'absolute',\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2),\r\n  },\r\n  fabGreen: {\r\n    color: theme.palette.common.white,\r\n    backgroundColor: green[500],\r\n    '&:hover': {\r\n      backgroundColor: green[600],\r\n    },\r\n  },\r\n}));\r\n\r\nfunction FloatingActionButtonZoom() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  function handleChange(event, newValue) {\r\n    setValue(newValue);\r\n  }\r\n\r\n  function handleChangeIndex(index) {\r\n    setValue(index);\r\n  }\r\n\r\n  const transitionDuration = {\r\n    enter: theme.transitions.duration.enteringScreen,\r\n    exit: theme.transitions.duration.leavingScreen,\r\n  };\r\n\r\n  const fabs = [\r\n    {\r\n      color: 'primary',\r\n      className: classes.fab,\r\n      icon: <AddIcon />,\r\n    },\r\n    {\r\n      color: 'secondary',\r\n      className: classes.fab,\r\n      icon: <EditIcon />,\r\n    },\r\n    {\r\n      color: 'inherit',\r\n      className: clsx(classes.fab, classes.fabGreen),\r\n      icon: <UpIcon />,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n        >\r\n          <Tab label=\"Item One\" />\r\n          <Tab label=\"Item Two\" />\r\n          <Tab label=\"Item Three\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabContainer dir={theme.direction}>Item One</TabContainer>\r\n        <TabContainer dir={theme.direction}>Item Two</TabContainer>\r\n        <TabContainer dir={theme.direction}>Item Three</TabContainer>\r\n      </SwipeableViews>\r\n      {fabs.map((fab, index) => (\r\n        <Zoom\r\n          key={fab.color}\r\n          in={value === index}\r\n          timeout={transitionDuration}\r\n          style={{\r\n            transitionDelay: `${value === index ? transitionDuration.exit : 0}ms`,\r\n          }}\r\n          unmountOnExit\r\n        >\r\n          <Fab className={fab.className} color={fab.color}>\r\n            {fab.icon}\r\n          </Fab>\r\n        </Zoom>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FloatingActionButtonZoom;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FloatingActionButtonZoom from './FloatingActionButtonZoom';\n\nfunction MyComponent() {\n  return (\n    <div>\n      Yukari3 Cute!!!!!!!!!!!\n      <FloatingActionButtonZoom />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <MyComponent/>\n          aaa\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}